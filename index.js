'use strict';
const express = require('express');
const line = require('@line/bot-sdk');
const axios = require('axios');

const config = {
  channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.CHANNEL_SECRET
};

const app = express();
const PAGE_SIZE = 10;
const currentUsers = {}; // „É¶„Éº„Ç∂„ÉºID ‚Üí ÂêçÂâç ‰øùÂ≠ò

app.post('/callback', line.middleware(config), async (req, res) => {
  const client = new line.Client(config);

  await Promise.all(req.body.events.map(async (event) => {
    if (event.type !== 'message' || event.message.type !== 'text') return;

    const msg = event.message.text;
    const userId = event.source.userId;

// „Çπ„ÉÜ„ÉÉ„Éó‚ë†Ôºö„Äå„Ç∑„Éï„ÉàÂÖ•Âäõ„Äç„ÅßÂêçÂâçÈÅ∏Êäû„Éú„Çø„É≥„ÇíÈÄÅ‰ø°
if (msg === '„Ç∑„Éï„ÉàÂÖ•Âäõ') {
  try {
    // ‚úÖ „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàÔºàGASÔºâ„Åã„ÇâÂêçÂâç‰∏ÄË¶ß„ÇíÂèñÂæó
    const response = await axios.get('https://script.google.com/macros/s/AKfycbxxiYFTn93iTPZMGj56VYOejs1pxGnrjZlgwafh28-4XHKZ40683e-fV3_3o0ifq4vz/exec');
    const names = response.data.names;
    console.log('‚ñ∂ response.data:', response.data); 

    currentUsers[userId] = { names, page: 1 };

    const sliced = names.slice(0, PAGE_SIZE);
    return client.replyMessage(event.replyToken, createFlexMessage(sliced, 1, names.length));
  } catch (error) {
    console.error('üö® ÂêçÂâç‰∏ÄË¶ßÂèñÂæó„Ç®„É©„Éº:', error.response?.data || error.message);
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‚ö†Ô∏è ÂêçÂâç‰∏ÄË¶ß„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ'
    });
  }
}
    
    // ‚úÖ „ÄåÊ¨°„Å∏ N„Äç‚Üí Ê¨°„Éö„Éº„Ç∏„ÇíË°®Á§∫
    if (msg.startsWith('Ê¨°„Å∏ ')) {
      const page = parseInt(msg.replace('Ê¨°„Å∏ ', ''), 10);
      const names = currentUsers[userId]?.names || [];
      const start = (page - 1) * PAGE_SIZE;
      const sliced = names.slice(start, start + PAGE_SIZE);

      currentUsers[userId].page = page;
      return client.replyMessage(event.replyToken, createFlexMessage(sliced, page, names.length));
    }

    // ‚úÖ ÂêçÂâç„ÇíÈÅ∏Êäû ‚Üí „Çª„ÉÉ„Ç∑„Éß„É≥‰øùÂ≠ò
    if (msg.startsWith('ÂêçÂâç:')) {
      const name = msg.replace('ÂêçÂâç:', '');
      currentUsers[userId] = { ...currentUsers[userId], name };
      return client.replyMessage(event.replyToken, [
        {
          type: 'text',
          text: `${name} „Åï„Çì„ÄÅÂ∏åÊúõ„ÅÆ„Ç∑„Éï„Éà„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ\nüìã „Ç≥„Éî„Éö„ÅßË§áÊï∞Ë°å„Åæ„Å®„ÇÅ„Å¶ÈÄÅ‰ø°„ÇÇOK„Åß„Åô`
        },
        {
          type: 'text',
          text: `‰æãÔºö\n7/15 9:00-13:00\n7/16 10:00-14:00\n7/18 17:00-21:00`
        }
      ]);
    }
  
 // „Çπ„ÉÜ„ÉÉ„Éó‚ë¢ÔºöË§áÊï∞Ë°å„ÅÆ„Ç∑„Éï„ÉàÊó•Á®ã„ÇíÂá¶ÁêÜ
const lines = msg.split('\n').filter(line => line.trim());
const isAllShifts = lines.every(line => /^(\d{1,2}\/\d{1,2})\s*([0-9]{1,2}:[0-9]{2})-([0-9]{1,2}:[0-9]{2})$/.test(line));

if (isAllShifts && lines.length > 0) {
  const name = currentUsers[userId]?.name;

  if (!name) {
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‚ö†Ô∏è ÂÖà„Å´„Äå„Ç∑„Éï„ÉàÂÖ•Âäõ„Äç„Åã„ÇâÂêçÂâç„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ'
    });
  }

  try {
    for (const line of lines) {
      const [, date, start, end] = line.match(/^(\d{1,2}\/\d{1,2})\s*([0-9]{1,2}:[0-9]{2})-([0-9]{1,2}:[0-9]{2})$/);
      await axios.post('https://script.google.com/macros/s/AKfycbxxiYFTn93iTPZMGj56VYOejs1pxGnrjZlgwafh28-4XHKZ40683e-fV3_3o0ifq4vz/exec', {
        name, date, start, end
      });
    }

    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: `‚úÖ ${lines.length}‰ª∂„ÅÆ„Ç∑„Éï„ÉàÂ∏åÊúõ„ÇíÁôªÈå≤„Åó„Åæ„Åó„ÅüÔºÅÔºà${name}Ôºâ`
    });
  } catch (error) {
    console.error('üö® Ë§áÊï∞ÁôªÈå≤Â§±Êïó:', error.response?.data || error.message);
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‚ö†Ô∏è „Ç∑„Éï„ÉàÁôªÈå≤‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇÂ∫óÈï∑„Å´ÈÄ£Áµ°„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
    });
  }
}


    // „Åù„ÅÆ‰ªñ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏Ôºö„Ç®„É©„ÉºË°®Á§∫
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‚ö†Ô∏è ÂÖ•ÂäõÂΩ¢Âºè„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ\n„Äå„Ç∑„Éï„ÉàÂÖ•Âäõ„Äç„Åã„ÇâÂßã„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
    });
  }));

  res.status(200).end();
});

// ‚úÖ Flex„É°„ÉÉ„Çª„Éº„Ç∏ÁîüÊàêÈñ¢Êï∞Ôºà10‰ª∂ÔºãÊ¨°„Å∏„Éú„Çø„É≥Ôºâ
function createFlexMessage(nameList, page, totalCount) {
  const buttons = nameList.map(name => ({
    type: 'button',
    action: {
      type: 'message',
      label: name,
      text: `ÂêçÂâç:${name}`
    }
  }));

  const totalPages = Math.ceil(totalCount / PAGE_SIZE);
  if (page < totalPages) {
    buttons.push({
      type: 'button',
      action: {
        type: 'message',
        label: `Ê¨°„Å∏ ${page + 1}`,
        text: `Ê¨°„Å∏ ${page + 1}`
      }
    });
  }

  return {
    type: 'flex',
    altText: `ÂêçÂâç„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑÔºà${page}„Éö„Éº„Ç∏ÁõÆÔºâ`,
    contents: {
      type: 'bubble',
      body: {
        type: 'box',
        layout: 'vertical',
        contents: buttons
      }
    }
  };
}

const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`listening on ${port}`);
});
